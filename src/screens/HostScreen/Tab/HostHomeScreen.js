import React, { useEffect, useState } from 'react';
import { useNavigation } from '@react-navigation/native';
import { View, StyleSheet, ScrollView, ActivityIndicator, Text, TouchableOpacity } from 'react-native';
import { useDispatch, useSelector } from 'react-redux';
import { fetchHostByAccount, clearHost } from '../../../redux/slices/host.slice';
import Header from '../../../components/HostHomeScreen/Header';
import Stats from '../../../components/HostHomeScreen/Stats';
import Dashboard from '../../../components/HostHomeScreen/Dashboard';
import Schedule from '../../../components/HostHomeScreen/Schedule';
import Section from '../../../components/HostHomeScreen/Section';

import { DashboardStats } from '../../../data/MockData';

const HostHomeScreen = () => {
  const navigation = useNavigation();
  const dispatch = useDispatch();

  
  // Get data from Redux store
  const { user } = useSelector(state => state.auth); 
  const { host, loading, error } = useSelector(state => state.host);
  const accountId = user?.id || user?.accountId;

  // Fetch host data on component mount
  useEffect(() => {
    if (accountId) {
      dispatch(fetchHostByAccount(accountId));
    }

    return () => {
      // dispatch(clearHost()); // Uncomment if you want to clear data on unmount
    };
  }, [dispatch, accountId]);

  const handleRetry = () => {
    if (accountId) {
      dispatch(fetchHostByAccount(accountId));
    }
  };




  const handleNavigateMyHostBooking = () => {
  navigation.navigate('HostBooking');
};


    const DashboardItems = [
      { 
        id: 1, 
        title: 'Qu·∫£n L√Ω Ph√≤ng', 
        subtitle: '8 ph√≤ng ƒëang ƒë·∫∑t\n2 ph√≤ng c·∫ßn b·∫£o tr√¨', 
        color: '#E3F2FD', 
        textColor: '#1976D2', 
        icon: 'üè†' 
      },
      { 
        id: 2, 
        title: 'Kh√°ch S·∫Øp T·ªõi', 
        subtitle: '5 l∆∞·ª£t check-in h√¥m nay', 
        color: '#F3E5F5', 
        textColor: '#7B1FA2', 
        icon: 'üë•' 
      },
      { 
        id: 3, 
        title: 'ƒê√°nh Gi√°', 
        subtitle: '5 ƒë√°nh gi√° t·ªët\n2 ƒëang ch·ªù ph·∫£n h·ªìi', 
        color: '#E8F5E8', 
        textColor: '#388E3C', 
        icon: '‚≠ê' 
      },
      { 
        id: 4, 
        title: 'ƒê∆°n Ch·ªù X·ª≠ L√Ω', 
        subtitle: '2 ƒë∆°n ƒë·∫∑t ch·ªù x√°c nh·∫≠n', 
        color: '#FFF3E0', 
        textColor: '#F57C00', 
        icon: 'üìã' 
      },
    ];


      const DashboardSchedule = [
        { guestName: 'Thu H√†', time: '09:00', people: '5 ng∆∞·ªùi', status: 'check-in' },
        { guestName: 'Anh Thy', time: '14:30', people: '2 ng∆∞·ªùi', status: 'check-in' },
        { guestName: 'Minh Tu·∫•n', time: '11:00', people: '3 ng∆∞·ªùi', status: 'check-out' },
      ];

  // Loading state
  if (loading && !host) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#FF6B6B" />
        <Text style={styles.loadingText}>ƒêang t·∫£i th√¥ng tin...</Text>
      </View>
    );
  }

  // Error state
  if (error && !host) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>
          {typeof error === 'string' ? error : 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin host'}
        </Text>
        <TouchableOpacity style={styles.retryButton} onPress={handleRetry}>
          <Text style={styles.retryButtonText}>Th·ª≠ l·∫°i</Text>
        </TouchableOpacity>
      </View>
    );
  }

  // No data state
  if (!host) {
    return (
      <View style={styles.errorContainer}>
        <Text style={styles.errorText}>Kh√¥ng t√¨m th·∫•y th√¥ng tin host</Text>
        <TouchableOpacity style={styles.retryButton} onPress={handleRetry}>
          <Text style={styles.retryButtonText}>Th·ª≠ l·∫°i</Text>
        </TouchableOpacity>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Loading overlay when refreshing */}
      {loading && host && (
        <View style={styles.loadingOverlay}>
          <ActivityIndicator size="large" color="#FF6B6B" />
        </View>
      )}

      <ScrollView 
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        <Header host={host} />


        <Section title="T·ªïng Quan H√¥m Nay">
          <Stats stats={DashboardStats} />
        </Section>

        <Section title="Qu·∫£n L√Ω Nhanh">
          <Dashboard items={DashboardItems} />
        </Section>

        <Section
          title="L·ªãch H√¥m Nay"
          rightComponent={
            <TouchableOpacity onPress={handleNavigateMyHostBooking}>
              <Text style={styles.seeAllText}>Xem t·∫•t c·∫£</Text>
            </TouchableOpacity>
          }
        >
          <Schedule schedule={DashboardSchedule} />
        </Section>
      </ScrollView>

    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  scrollContent: {
    flexGrow: 1,
    paddingHorizontal: 20,
    paddingTop: 50,
    paddingBottom: 30,
  },
  addButtonContainer: {
    marginBottom: 20,
    alignItems: 'center',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#666',
  },
  loadingOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(248, 249, 250, 0.8)',
    zIndex: 1000,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    padding: 20,
  },
  errorText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 20,
  },
  retryButton: {
    backgroundColor: '#FF6B6B',
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  // Modal styles
  modalContainer: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
    paddingTop: 50, // Account for status bar
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#111827',
  },
  closeButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#F3F4F6',
    justifyContent: 'center',
    alignItems: 'center',
  },
  closeButtonText: {
    fontSize: 24,
    color: '#6B7280',
    fontWeight: '300',
  },
  modalContent: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  seeAllText: {
  color: '#1976D2', // M√†u xanh ho·∫∑c m√†u ch·ªß ƒë·∫°o c·ªßa app
  fontSize: 14,
  fontWeight: '500',
},
});

export default HostHomeScreen;